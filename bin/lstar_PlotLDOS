#! /usr/bin/env python3

import sys
import time
import numpy as np
import pandas as pd
import os.path

import matplotlib as mpl
from matplotlib import rc
import matplotlib.pyplot as plt

from ase.io import read as ase_read
from crewp.lodestar.orbitals import Orbitals
from crewp.spectra.pdos import PDOS

mpl.rcParams.update({'font.size': 20,
                     'font.family': "serif",
                     #'font.serif': [],                   
                     #'font.sans-serif': ["DejaVu Sans"], 
                     'mathtext.default' : 'regular',
                    })

pdosfname = 'PDOS.orb'
genfname = 'geoinp.gen'
oupfname = 'out.000'

def timer(f):
    def f_timer(*args, **kwargs):
        start = time.time()
        result = f(*args, **kwargs)
        end = time.time()
        print(f.__name__, 'took time:', end - start, )
        return result
    return f_timer

'''
In 'PDOS.orb', Fermi has already shifted to non-equilibrium.
'''

@timer
def get_pdos():
    orbitals = Orbitals(genfname, oupfname)
    pdos_df = orbitals.read_pdos_df(pdosfname)
    print('PDOS_df: ', sys.getsizeof(pdos_df)/1024.**2, 'MB')
    #store = pd.HDFStore('pdos_df.h5')
    return pdos_df

@timer
def get_ldos():
    if os.path.isfile('ldos_array.npz'):
        arrays = np.load('ldos_array.npz')
        ldos = arrays['ldos']
        x_arry = arrays['x_arry']
        en_arry = arrays['en_arry']
    else:
        pdos_df = get_pdos()
        pdos = PDOS(pdos_df)
        atoms = ase_read(filename=genfname, format='gen')
        coordinates = atoms.get_positions()
        ldos, x_arry, en_arry = pdos.get_ldos1d(coordinates=coordinates, axis=0, broaden='Slater')
        np.savez('ldos_array.npz', ldos=ldos, x_arry=x_arry, en_arry=en_arry)
    print('LDOS: ', sys.getsizeof(ldos)/1024.**2, 'MB')
    return ldos, x_arry, en_arry
ldos, x_arry, en_arry = get_ldos()

try:
    upperlim = float(sys.argv[1])
except IndexError:
    upperlim = ldos.max()

@timer
def get_contour_mesh():
    x_mesh, en_mesh = np.meshgrid( x_arry, en_arry, indexing='ij' )
    return x_mesh, en_mesh
x_mesh, en_mesh = get_contour_mesh()


fig = plt.figure()

ax = fig.add_subplot(1,1,1,)

cmap= 'coolwarm'   # 'coolwarm'
color_arry = np.linspace(-0.5, upperlim, 100, endpoint=True)
tick_arry = np.arange(0., np.ceil(upperlim), 1., )

@timer
def plot_contour():
    return ax.contourf( x_mesh, en_mesh, ldos, color_arry, cmap=cmap, extend='both', ) #vmin=-.5, vmax=5.5, ) 
ldos_contour = plot_contour()

cbar = plt.colorbar(ldos_contour, ax=ax, ticks=tick_arry, )
#cbar.solids.set_edgecolor("face")
#cbar.solids.set_rasterized(True)
#cbar.set_clim(-0., 6.)
ax.set_xlabel(r'$x \: (Ã…)$',)
ax.set_ylabel(r'$Energy \: (eV)$',)

@timer
def show_plot():
    plt.show()
show_plot()



#! /usr/bin/env python3

import numpy as np
import argparse

import matplotlib as mpl
from matplotlib import rc
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

from crewp.field.scalar_CartesGrid import ScalarField

mpl.rcParams.update({'font.size': 20,
                     'font.family': "serif",
                     #'font.serif': [],                   
                     #'font.sans-serif': ["DejaVu Sans"], 
                     'mathtext.default' : 'regular',
                    })

'''
# Parsing input:
'''
inpparse = argparse.ArgumentParser()
inpparse.add_argument(
    '-i',
    '--cube',
    dest='cubefname',
    help='Filename with cube format',
    )
inpparse.add_argument(
    '-a',
    '--axs',
    help="Average to 2d (e.g. 'xz') or 1d (e.g. 'y')"
    )
inpparse.add_argument(
    '-l',
    '--lowerlim',
    type=float,
    help='Lower limit',
    )
inpparse.add_argument(
    '-u',
    '--upperlim',
    type=float,
    help='Upper limit',
    )
args = inpparse.parse_args()

'''
# Read cube file:
'''
field3d = ScalarField(inptype='cube', inpfname=args.cubefname)

fig = plt.figure()
ax = fig.add_subplot(1,1,1,)

def plot_2d(ax):
    field2d, arrys = field3d.get_avg2d(axes=args.axs)
    if args.lowerlim==None: lowerlim = field2d.min()
    else: lowerlim = args.lowerlim
    if args.upperlim==None: upperlim = field2d.max()
    else: upperlim = args.upperlim
    meshes = np.meshgrid( *arrys,  indexing='ij', )
    divider = make_axes_locatable(ax)
    ax_cbar = divider.append_axes('top', size="15%", pad=0.5, )#pack_start=True)
    cmap= 'coolwarm'   # 'coolwarm'
    color_arry = np.linspace(lowerlim, upperlim, 100, endpoint=True)
    #tick_arry = np.arange(0., upperlim, 0.01, )
    field_contour = ax.contourf( *meshes, field2d, color_arry, cmap=cmap, extend='both', ) #vmin=-.5, vmax=5.5, ) 
    fig.colorbar(field_contour, cax=ax_cbar, orientation='horizontal', ) #ticks=tick_arry, )
    ax.set_xlabel('{:s} (Å)'.format(args.axs[0]))
    ax.set_ylabel('{:s} (Å)'.format(args.axs[1]))

def plot_1d(ax):
    field1d, axisarry = field3d.get_avg1d(axis=args.axs)
    ax.plot( axisarry, field1d )
    ax.set_xlabel('{:s} (Å)'.format(args.axs))

if len(args.axs)==1:
    plot_1d(ax)
elif len(args.axs)==2:
    plot_2d(ax)

plt.show()




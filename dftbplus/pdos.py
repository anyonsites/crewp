
import sys
from subprocess import run
import pandas as pd
import ase.io
from crewp.dftbplus.hsd import HSD

class PDOS:

    def __init__(self):
        pass

    def from_hsd(self, hsdfname='dftb_in.hsd', broaden=0.1):
        '''
        Build dataframe of PDOS from DFTB+ HSD input, 
        !!!
        Temporarily only for atomic-shell resolved (no orbital resolved). 
        atoms listed in Analysis:ProjectStates section.
        Better suite for input generated by:
            crewp.dftbplus.HSD.pdos_atoms()
        !!!
        '''
        shell_list = ['s', 'p', 'd', 'f']
        # read HSD input, get keys
        hsd = HSD(hsdfname)
        nestkeys = hsd.get_nestkeys()
        pdos_keydict = nestkeys['Analysis']['ProjectStates']
        max_ang = nestkeys['Hamiltonian']['MaxAngularMomentum']
        atoms = ase.io.read(nestkeys['Geometry']['genfname'])
        element_list = atoms.get_chemical_symbols()
        # fill [(i_atom, band_file_label), ... ] list and sort
        atom_label_list = []
        for region_key, atomdict in pdos_keydict.items():
            atom_label_list.append( ( int(atomdict['Atoms']), atomdict['Label'] ) )
        atom_label_list.sort(key=lambda x: x[0])
        # transform band.out to PDOS data, build data table
        atom_df_list = []
        for i_atom, flabel in atom_label_list: # loop atom
            element = element_list[i_atom-1] # search chem element for i_atom
            shells = shell_list[ : shell_list.index(max_ang[element])+1 ] # get shell for i_atom
            shell_df_list = []
            for i_shell, shell in enumerate(shells, 1): # loop shell
                band_fname = '.'.join( [flabel, str(i_shell), 'out'] )
                dos_fname = '.'.join( [flabel, str(i_shell), 'dat'] )
                run( ['dp_dos', '-b', str(broaden), '-w', band_fname, dos_fname,], stdout=sys.stdout)
                sys.stdout.write( ' '.join(['From band data', band_fname, 'to PDOS data', dos_fname, '...\n']) ) 
                sys.stdout.flush()
                df = pd.read_csv( dos_fname, 
                        header=None, 
                        delim_whitespace=True, 
                        index_col=0,
                        names=[shell]
                        )
                shell_df_list.append(df)
            atom_pdos_df = pd.concat(shell_df_list, axis=1)
            atom_pdos_df.columns = pd.MultiIndex.from_product( [ [i_atom], atom_pdos_df.columns ] )
            atom_df_list.append(atom_pdos_df)
        self.pdos_df = pd.concat(atom_df_list, axis=1)

    def get_pdos_df(self):
        return self.pdos_df



